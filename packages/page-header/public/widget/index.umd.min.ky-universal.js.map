{"version":3,"sources":["webpack://PageHeaderTestWidget//Users/randyhoulahan/projects/@scbd/ecosystem/node_modules/ky-universal/browser.js","webpack://PageHeaderTestWidget//Users/randyhoulahan/projects/@scbd/ecosystem/node_modules/ky/index.js"],"names":["globals","getGlobal","property","self","window","global","globalThis","globalProperties","Object","defineProperty","globalObject","value","bind","isObject","supportsAbortController","AbortController","supportsStreams","ReadableStream","supportsFormData","FormData","mergeHeaders","source1","source2","result","Headers","isHeadersInstance","source","key","undefined","delete","set","deepMerge","sources","returnValue","headers","Array","isArray","entries","Reflect","has","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","retryMethods","retryStatusCodes","retryAfterStatusCodes","stop","Symbol","HTTPError","Error","response","super","statusText","String","status","this","name","TimeoutError","request","delay","ms","Promise","resolve","setTimeout","timeout","abortController","options","reject","timeoutID","abort","fetch","then","catch","clearTimeout","normalizeRequestMethod","input","includes","toUpperCase","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","normalizeRetryOptions","retry","maxSafeTimeout","Ky","_retryCount","_input","_options","credentials","hooks","beforeRequest","beforeRetry","afterResponse","method","prefixUrl","throwHttpErrors","URL","Request","TypeError","startsWith","endsWith","signal","addEventListener","searchParams","URLSearchParams","toString","url","replace","body","JSON","stringify","fn","async","RangeError","_fetch","hook","modifiedResponse","clone","Response","ok","onDownloadProgress","_stream","parseJson","isRetriableMethod","toLowerCase","_retry","type","mimeType","get","error","retryAfter","after","Number","isNaN","Date","parse","now","maxRetryAfter","BACKOFF_FACTOR","Math","min","_calculateRetryDelay","hookResult","retryCount","totalBytes","transferredBytes","controller","reader","getReader","read","done","close","byteLength","percent","enqueue","Uint8Array","validateAndMerge","createInstance","defaults","ky","create","newDefaults","extend"],"mappings":"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","file":"index.umd.min.ky-universal.js","sourcesContent":["export {default} from 'ky';\n","/*! MIT License Â© Sindre Sorhus */\n\nconst globals = {};\n\nconst getGlobal = property => {\n\t/* istanbul ignore next */\n\tif (typeof self !== 'undefined' && self && property in self) {\n\t\treturn self;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined' && window && property in window) {\n\t\treturn window;\n\t}\n\n\tif (typeof global !== 'undefined' && global && property in global) {\n\t\treturn global;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\treturn globalThis;\n\t}\n};\n\nconst globalProperties = [\n\t'Headers',\n\t'Request',\n\t'Response',\n\t'ReadableStream',\n\t'fetch',\n\t'AbortController',\n\t'FormData'\n];\n\nfor (const property of globalProperties) {\n\tObject.defineProperty(globals, property, {\n\t\tget() {\n\t\t\tconst globalObject = getGlobal(property);\n\t\t\tconst value = globalObject && globalObject[property];\n\t\t\treturn typeof value === 'function' ? value.bind(globalObject) : value;\n\t\t}\n\t});\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\nconst supportsFormData = typeof globals.FormData === 'function';\n\nconst mergeHeaders = (source1, source2) => {\n\tconst result = new globals.Headers(source1 || {});\n\tconst isHeadersInstance = source2 instanceof globals.Headers;\n\tconst source = new globals.Headers(source2 || {});\n\n\tfor (const [key, value] of source) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject(source.headers)) {\n\t\t\t\theaders = mergeHeaders(headers, source.headers);\n\t\t\t}\n\t\t}\n\n\t\treturnValue.headers = headers;\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = [\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n];\n\nconst retryStatusCodes = [\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n];\n\nconst retryAfterStatusCodes = [\n\t413,\n\t429,\n\t503\n];\n\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\t// Set the message to the status text, such as Unauthorized,\n\t\t// with some fallbacks. This message should never be undefined.\n\t\tsuper(\n\t\t\tresponse.statusText ||\n\t\t\tString(\n\t\t\t\t(response.status === 0 || response.status) ?\n\t\t\t\t\tresponse.status : 'Unknown response error'\n\t\t\t)\n\t\t);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor(request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (request, abortController, options) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\toptions.fetch(request)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\n// The maximum value of a 32bit int (see issue #117)\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n\tconstructor(input, options = {}) {\n\t\tthis._retryCount = 0;\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: this._input.credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders(this._input.headers, options.headers),\n\t\t\thooks: deepMerge({\n\t\t\t\tbeforeRequest: [],\n\t\t\t\tbeforeRetry: [],\n\t\t\t\tafterResponse: []\n\t\t\t}, options.hooks),\n\t\t\tmethod: normalizeRequestMethod(options.method || this._input.method),\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n\t\t\tfetch: options.fetch || globals.fetch\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globals.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globals.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globals.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\tconst searchParams = '?' + new URLSearchParams(this._options.searchParams).toString();\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (((supportsFormData && this._options.body instanceof globals.FormData) || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globals.Request(new globals.Request(url, this.request), this._options);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', 'application/json');\n\t\t\tthis.request = new globals.Request(this.request, {body: this._options.body});\n\t\t}\n\n\t\tconst fn = async () => {\n\t\t\tif (this._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis.request,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tresponse.clone()\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globals.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!response.ok && this._options.throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\tif (this._options.parseJson) {\n\t\t\t\tresponse.json = async () => {\n\t\t\t\t\treturn this._options.parseJson(await response.text());\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\tthis.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst response = (await result).clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: this._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tresponse: error.response.clone(),\n\t\t\t\t\t\tretryCount: this._retryCount\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._options.throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, this._options);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globals.Response(\n\t\t\tnew globals.ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.HTTPError = HTTPError;\n\tky.TimeoutError = TimeoutError;\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky;\n};\n\nexport default createInstance();\n"],"sourceRoot":""}