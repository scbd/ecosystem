import { Button, Sprite, color } from '@amcharts/amcharts4/core'

export const countryClick = (opts) => (ev) => {
  const { host, basePath, search } = opts
  const code = ev.target.dataItem.dataContext.id
  
  window.location.href = `${host}${basePath}${search}${code}`
}


export const backGround = {
  fill       : '#ffffff',
  fillOpacity: 1
}

export const backgroundSeries= {
  mapPolygons: {
    polygon: {
      fill       : '#BBDEFB',
      fillOpacity: 1
    }
  }
}

export const zoomControl = {}

export const chartContainer = {  }

export const countries = {
  type       : 'MapPolygonSeries',
  useGeodata : true,
  mapPolygons: {
    tooltipText: '{name}',
    fill       : '#01463a',
    stroke     : '#9a5917',
    strokeWidth: 0.5,
    states     : { hover: { properties: { fill: '#9a5917' } } }
  }
}

export const grid = {
  type: 'GraticuleSeries',

  mapLines: {
    line: {
      stroke      : '#000000',
      strokeOpacit: .08
    }
  }
}

export const series =    [ grid, countries  ]

export const mapConfig = {
  projection   : 'Orthographic',
  panBehavior  : 'rotateLongLat',
  deltaLatitude: -20,
  events       : { ready },
  backGround,
  backgroundSeries,
  chartContainer,
  minHeight: 450
}

function buttons(){
  const home = this.createChild(Button)
  const globe  = this.createChild(Button)
  homeButton(home)
  globeButton(globe, home)
  //globe()
}
function homeButton(button){

  button.padding(5, 5, 5, 5)
  button.align = 'right'
  button.marginRight = 15
  button.events.on('hit', (evt) => evt.target._parent._parent.goHome())
  button.icon = new Sprite()
  button.icon.path = 'M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8'
  

}

function globeButton(button, sibling){

  button.padding(5, 5, 5, 5)
  button.align = 'right'
  button.marginRight = 15
  button.events.on('hit', (evt) => evt.target._parent._parent.goHome())
  button.icon = new Sprite()
  button.icon.path = 'M12 2c6.625 0 12 5.375 12 12s-5.375 12-12 12-12-5.375-12-12 5.375-12 12-12zM16.281 10.141c-0.125 0.094-0.203 0.266-0.359 0.297 0.078-0.016 0.156-0.297 0.203-0.359 0.094-0.109 0.219-0.172 0.344-0.234 0.266-0.109 0.531-0.141 0.812-0.187 0.266-0.063 0.594-0.063 0.797 0.172-0.047-0.047 0.328-0.375 0.375-0.391 0.141-0.078 0.375-0.047 0.469-0.187 0.031-0.047 0.031-0.344 0.031-0.344-0.266 0.031-0.359-0.219-0.375-0.438 0 0.016-0.031 0.063-0.094 0.125 0.016-0.234-0.281-0.063-0.391-0.094-0.359-0.094-0.313-0.344-0.422-0.609-0.063-0.141-0.234-0.187-0.297-0.328-0.063-0.094-0.094-0.297-0.234-0.313-0.094-0.016-0.266 0.328-0.297 0.313-0.141-0.078-0.203 0.031-0.313 0.094-0.094 0.063-0.172 0.031-0.266 0.078 0.281-0.094-0.125-0.25-0.266-0.219 0.219-0.063 0.109-0.297-0.016-0.406h0.078c-0.031-0.141-0.469-0.266-0.609-0.359s-0.891-0.25-1.047-0.156c-0.187 0.109 0.047 0.422 0.047 0.578 0.016 0.187-0.187 0.234-0.187 0.391 0 0.266 0.5 0.219 0.375 0.578-0.078 0.219-0.375 0.266-0.5 0.438-0.125 0.156 0.016 0.438 0.141 0.547 0.125 0.094-0.219 0.25-0.266 0.281-0.266 0.125-0.469-0.266-0.531-0.5-0.047-0.172-0.063-0.375-0.25-0.469-0.094-0.031-0.391-0.078-0.453 0.016-0.094-0.234-0.422-0.328-0.641-0.406-0.313-0.109-0.578-0.109-0.906-0.063 0.109-0.016-0.031-0.5-0.297-0.422 0.078-0.156 0.047-0.328 0.078-0.484 0.031-0.125 0.094-0.25 0.187-0.359 0.031-0.063 0.375-0.422 0.266-0.438 0.266 0.031 0.562 0.047 0.781-0.172 0.141-0.141 0.203-0.375 0.344-0.531 0.203-0.234 0.453 0.063 0.672 0.078 0.313 0.016 0.297-0.328 0.125-0.484 0.203 0.016 0.031-0.359-0.078-0.406-0.141-0.047-0.672 0.094-0.391 0.203-0.063-0.031-0.438 0.75-0.656 0.359-0.063-0.078-0.094-0.406-0.234-0.422-0.125 0-0.203 0.141-0.25 0.234 0.078-0.203-0.438-0.344-0.547-0.359 0.234-0.156 0.047-0.328-0.125-0.422-0.125-0.078-0.516-0.141-0.625-0.016-0.297 0.359 0.313 0.406 0.469 0.5 0.047 0.031 0.234 0.141 0.125 0.219-0.094 0.047-0.375 0.125-0.406 0.187-0.094 0.141 0.109 0.297-0.031 0.438-0.141-0.141-0.141-0.375-0.25-0.531 0.141 0.172-0.562 0.078-0.547 0.078-0.234 0-0.609 0.156-0.781-0.078-0.031-0.063-0.031-0.422 0.063-0.344-0.141-0.109-0.234-0.219-0.328-0.281-0.516 0.172-1 0.391-1.469 0.641 0.063 0.016 0.109 0.016 0.187-0.016 0.125-0.047 0.234-0.125 0.359-0.187 0.156-0.063 0.484-0.25 0.656-0.109 0.016-0.031 0.063-0.063 0.078-0.078 0.109 0.125 0.219 0.25 0.313 0.391-0.125-0.063-0.328-0.031-0.469-0.016-0.109 0.031-0.297 0.063-0.344 0.187 0.047 0.078 0.109 0.203 0.078 0.281-0.203-0.141-0.359-0.375-0.641-0.406-0.125 0-0.25 0-0.344 0.016-1.5 0.828-2.766 2.031-3.672 3.469 0.063 0.063 0.125 0.109 0.187 0.125 0.156 0.047 0 0.5 0.297 0.266 0.094 0.078 0.109 0.187 0.047 0.297 0.016-0.016 0.641 0.391 0.688 0.422 0.109 0.094 0.281 0.203 0.328 0.328 0.031 0.109-0.063 0.234-0.156 0.281-0.016-0.031-0.25-0.266-0.281-0.203-0.047 0.078 0 0.5 0.172 0.484-0.25 0.016-0.141 0.984-0.203 1.172 0 0.016 0.031 0.016 0.031 0.016-0.047 0.187 0.109 0.922 0.422 0.844-0.203 0.047 0.359 0.766 0.438 0.812 0.203 0.141 0.438 0.234 0.578 0.438 0.156 0.219 0.156 0.547 0.375 0.719-0.063 0.187 0.328 0.406 0.313 0.672-0.031 0.016-0.047 0.016-0.078 0.031 0.078 0.219 0.375 0.219 0.484 0.422 0.063 0.125 0 0.422 0.203 0.359 0.031-0.344-0.203-0.688-0.375-0.969-0.094-0.156-0.187-0.297-0.266-0.453-0.078-0.141-0.094-0.313-0.156-0.469 0.063 0.016 0.406 0.141 0.375 0.187-0.125 0.313 0.5 0.859 0.672 1.062 0.047 0.047 0.406 0.516 0.219 0.516 0.203 0 0.484 0.313 0.578 0.469 0.141 0.234 0.109 0.531 0.203 0.781 0.094 0.313 0.531 0.453 0.781 0.594 0.219 0.109 0.406 0.266 0.625 0.344 0.328 0.125 0.406 0.016 0.688-0.031 0.406-0.063 0.453 0.391 0.781 0.562 0.203 0.109 0.641 0.266 0.859 0.172-0.094 0.031 0.328 0.672 0.359 0.719 0.141 0.187 0.406 0.281 0.562 0.469 0.047-0.031 0.094-0.078 0.109-0.141-0.063 0.172 0.234 0.5 0.391 0.469 0.172-0.031 0.219-0.375 0.219-0.5-0.313 0.156-0.594 0.031-0.766-0.281-0.031-0.078-0.281-0.516-0.063-0.516 0.297 0 0.094-0.234 0.063-0.453s-0.25-0.359-0.359-0.547c-0.094 0.187-0.406 0.141-0.5-0.016 0 0.047-0.047 0.125-0.047 0.187-0.078 0-0.156 0.016-0.234-0.016 0.031-0.187 0.047-0.422 0.094-0.625 0.078-0.281 0.594-0.828-0.078-0.797-0.234 0.016-0.328 0.109-0.406 0.313-0.078 0.187-0.047 0.359-0.266 0.453-0.141 0.063-0.609 0.031-0.75-0.047-0.297-0.172-0.5-0.719-0.5-1.031-0.016-0.422 0.203-0.797 0-1.188 0.094-0.078 0.187-0.234 0.297-0.313 0.094-0.063 0.203 0.047 0.25-0.141-0.047-0.031-0.109-0.094-0.125-0.094 0.234 0.109 0.672-0.156 0.875 0 0.125 0.094 0.266 0.125 0.344-0.031 0.016-0.047-0.109-0.234-0.047-0.359 0.047 0.266 0.219 0.313 0.453 0.141 0.094 0.094 0.344 0.063 0.516 0.156 0.172 0.109 0.203 0.281 0.406 0.047 0.125 0.187 0.141 0.187 0.187 0.375 0.047 0.172 0.141 0.609 0.297 0.688 0.328 0.203 0.25-0.344 0.219-0.531-0.016-0.016-0.016-0.531-0.031-0.531-0.5-0.109-0.313-0.5-0.031-0.766 0.047-0.031 0.406-0.156 0.562-0.281 0.141-0.125 0.313-0.344 0.234-0.547 0.078 0 0.141-0.063 0.172-0.141-0.047-0.016-0.234-0.172-0.266-0.156 0.109-0.063 0.094-0.156 0.031-0.25 0.156-0.094 0.078-0.266 0.234-0.328 0.172 0.234 0.516-0.031 0.344-0.219 0.156-0.219 0.516-0.109 0.609-0.313 0.234 0.063 0.063-0.234 0.187-0.406 0.109-0.141 0.297-0.141 0.438-0.219 0 0.016 0.391-0.219 0.266-0.234 0.266 0.031 0.797-0.25 0.391-0.484 0.063-0.141-0.141-0.203-0.281-0.234 0.109-0.031 0.25 0.031 0.344-0.031 0.203-0.141 0.063-0.203-0.109-0.25-0.219-0.063-0.5 0.078-0.672 0.187zM13.734 23.844c2.141-0.375 4.047-1.437 5.484-2.953-0.094-0.094-0.266-0.063-0.391-0.125-0.125-0.047-0.219-0.094-0.375-0.125 0.031-0.313-0.313-0.422-0.531-0.578-0.203-0.156-0.328-0.328-0.625-0.266-0.031 0.016-0.344 0.125-0.281 0.187-0.203-0.172-0.297-0.266-0.562-0.344-0.25-0.078-0.422-0.391-0.672-0.109-0.125 0.125-0.063 0.313-0.125 0.438-0.203-0.172 0.187-0.375 0.031-0.562-0.187-0.219-0.516 0.141-0.672 0.234-0.094 0.078-0.203 0.109-0.266 0.203-0.078 0.109-0.109 0.25-0.172 0.359-0.047-0.125-0.313-0.094-0.328-0.187 0.063 0.375 0.063 0.766 0.141 1.141 0.047 0.219 0 0.578-0.187 0.75s-0.422 0.359-0.453 0.625c-0.031 0.187 0.016 0.359 0.187 0.406 0.016 0.234-0.25 0.406-0.234 0.656 0 0.016 0.016 0.172 0.031 0.25z'
  button.insertAfter(sibling)
  button.align = 'left'
  button.maxHeight ='26px'

}

let   animation, delayed

function ready(ev){

  const   code        = getCountryFromQuery()
  const   map         = ev.target
  const polygonSeries = map.series.values[0]

  polygonSeries.toFront()

  if(code) return goToCountry({ map, code })

  animation = map.animate({ property: 'deltaLongitude', to: 200000 }, 20000000)

  map.seriesContainer.events.on('down',             () => { animation.pause() })
  map.seriesContainer.events.on('up',               () => { setAnimationDelay(map) })
  map.seriesContainer.events.on('swipe',            () => { stopStartDelayAnimation(animation) })
  map.seriesContainer.events.on('wheel',            () => { stopStartDelayAnimation(animation) })
  map.seriesContainer.events.on('zoomlevelchanged', () => { stopStartDelayAnimation(animation) })
}

function stopStartDelayAnimation(animation){
  animation.pause()
  setAnimationDelay()
}

function setAnimationDelay(){
  if(delayed) clearTimeout(delayed)

  delayed = setTimeout(() => {
    animation.resume()
    clearTimeout(delayed)
    delayed = ''
  }, 5000)
}


function goToCountry({ map, code }){
  const polygonSeries = map.series.values[0]
  const polygon       = polygonSeries.getPolygonById(code.toUpperCase())
  

  polygon.fill                      = color('#9a5917')
  polygon.tooltip.getFillFromObject = false;
  polygon.tooltip.background.fill   = color('#01463a')

  map.deltaLatitude  = -polygon.visualLatitude
  map.deltaLongitude = -polygon.visualLongitude

  map.zoomIn()
}

function getCountryFromQuery(){
  const urlParams = new URLSearchParams(location.search);

  return urlParams.get('country');
}

